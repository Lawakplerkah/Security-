{
  "version": "1",
  "update": [
    {
      "path": "plugins/special/owner.js",
      "code": "//CREATE BY REZA DEVS KUROMI\nexports.run={usage:[\\\"owner\\\"],hidden:[\\\"creator\\\",\\\"developer\\\",\\\"dev\\\"],category:\\\"special\\\",async:async(e,{kuromi:a})=>{a.sendkontak(e.chat,global.owner,global.ownerName,e)}};"
    },
    {
      "path": "plugins/kaorisearch.js",
      "code": "const axios = require(\\\"axios\\\");\nconst cheerio = require(\\\"cheerio\\\");\n\nasync function scrapeKaoriSearch(query) {\n    try {\n        const response = await axios.get(`https://www.kaorinusantara.or.id/?s=${query}`);\n        const html = response.data;\n        const $ = cheerio.load(html);\n        let results = [];\n\n        $(\\\".td_module_10\\\").each((index, element) => {\n            const title = $(element).find(\\\".entry-title a\\\").text().trim();\n            const url = $(element).find(\\\".entry-title a\\\").attr(\\\"href\\\");\n            const img = $(element).find(\\\".td-module-thumb img\\\").attr(\\\"src\\\");\n            const date = $(element).find(\\\".td-post-date time\\\").text().trim();\n            const author = $(element).find(\\\".td-post-author-name a\\\").text().trim();\n            const category = $(element).find(\\\".td-post-category\\\").text().trim();\n            const excerpt = $(element).find(\\\".td-excerpt\\\").text().trim();\n\n            results.push({\n                title,\n                url,\n                img,\n                date,\n                author,\n                category,\n                excerpt\n            });\n        });\n\n        return results.length > 0 ? results : null;\n    } catch (e) {\n        return null;\n    }\n}\n\nexports.run = {\n    usage: ['kaorisearch'], // Command utama\n    hidden: [], // Command simpel\n    use: 'Cari berita di Kaori Nusantara', // Deskripsi \n    category: 'searching',\n    async: async (m, { func, kuromi, isPrem }) => {\n        if (!m.text) return m.reply('Masukkan kata kunci pencarian! Contoh: !kaorisearch anime');\n\n        const query = m.text;\n        const news = await scrapeKaoriSearch(query);\n\n        if (!news) {\n            return kuromi.sendMessage(m.chat, { text: `⚠️ Tidak ditemukan hasil untuk *\\\"${query}\\\"*.` }, { quoted: m });\n        }\n\n        // Ambil berita pertama untuk dikirim dengan gambar\n        const firstNews = news[0];\n        const caption = `📰 *${firstNews.title}*\\n\\n📅 *Tanggal:* ${firstNews.date}\\n✍️ *Penulis:* ${firstNews.author}\\n📂 *Kategori:* ${firstNews.category}\\n\\n${firstNews.excerpt}\\n\\n🔗 *Baca Selengkapnya:* ${firstNews.url}`;\n\n        // Kirim berita pertama dengan gambar\n        await kuromi.sendMessage(m.chat, { image: { url: firstNews.img }, caption }, { quoted: m });\n\n        // Kirim 4 berita lainnya dalam bentuk teks\n        let text = `📰 *Berita Lainnya:*\\n\\n`;\n        news.slice(1, 5).forEach((article, i) => {\n            text += `*${i + 2}. ${article.title}*\\n📅 ${article.date} | ✍️ ${article.author}\\n🔗 ${article.url}\\n\\n`;\n        });\n\n        kuromi.sendMessage(m.chat, { text }, { quoted: m });\n    }\n};"
    },
    {
      "path": "plugins/kaorinews.js",
      "code": "const axios = require(\\\"axios\\\");\nconst cheerio = require(\\\"cheerio\\\");\n\nasync function scrapeKaoriNews() {\n  try {\n    const response = await axios.get(\\\"https://www.kaorinusantara.or.id/newsline\\\");\n    const html = response.data;\n    const $ = cheerio.load(html);\n\n    let articles = [];\n\n    $(\\\".td_module_10\\\").each((i, el) => {\n      const title = $(el).find(\\\".entry-title a\\\").text().trim();\n      const link = $(el).find(\\\".entry-title a\\\").attr(\\\"href\\\");\n      const description = $(el).find(\\\".td-excerpt\\\").text().trim();\n      const image = $(el).find(\\\".td-module-thumb img\\\").attr(\\\"data-src\\\") || $(el).find(\\\".td-module-thumb img\\\").attr(\\\"src\\\");\n\n      articles.push({ title, link, description, image });\n    });\n\n    return articles;\n  } catch (e) {\n    console.error(\\\"Error fetching data:\\\", e.message);\n    return [];\n  }\n}\n\nexports.run = {\n  usage: ['kaorinews'], // command utama\n  hidden: [], // command simpel\n  use: 'Scrape berita terbaru dari Kaori Nusantara', // deskripsi \n  category: 'searching',\n  async: async (m, { func, kuromi, isPrem }) => {\n    const news = await scrapeKaoriNews();\n    \n    if (news.length === 0) {\n      return kuromi.sendMessage(m.chat, { text: \\\"Gagal mengambil berita dari Kaori Nusantara.\\\" }, { quoted: m });\n    }\n\n    // Ambil berita pertama untuk dikirim dengan gambar\n    const firstNews = news[0];\n    const caption = `📰 *${firstNews.title}*\\n\\n${firstNews.description}\\n\\n🔗 *Baca Selengkapnya:* ${firstNews.link}`;\n\n    // Kirim berita pertama dengan gambar\n    await kuromi.sendMessage(m.chat, { image: { url: firstNews.image }, caption }, { quoted: m });\n\n    // Kirim 4 berita lainnya dalam bentuk teks\n    let text = `📰 *Berita Lainnya:*\\n\\n`;\n    news.slice(1, 5).forEach((article, i) => {\n      text += `*${i + 2}. ${article.title}*\\n`;\n      text += `🔗 ${article.link}\\n\\n`;\n    });\n\n    kuromi.sendMessage(m.chat, { text }, { quoted: m });\n  }\n};"
    },
    {
      "path": "plugins/developer/restart.js",
      "code": "let multidb=new(require(\\\"../../system/multidb.js\\\"));exports.run={usage:[\\\"restart\\\"],category:\\\"owner\\\",async:async(e,{func:a,kuromi:t})=>{await t.sendMessage(e.chat,{text:a.texted(\\\"monospace\\\",\\\"Restarting...\\\")},{quoted:e,ephemeralExpiration:e.expiration}).then(async()=>{if(await multidb.init.save(global.db),!process.send)return e.reply(\\\"Tidak dapat me-restart bot karena file `index.js` tidak dijalankan.\\\");process.send(\\\"reset\\\")})},devs:!0};"
    },
    {
      "path": "plugins/ai/hitamkan.js",
      "code": "const { GoogleGenerativeAI } = require(\\\"@google/generative-ai\\\");\nconst fs = require(\\\"fs\\\");\nconst path = require(\\\"path\\\");\n\nexports.run = {\n  usage: ['hitamkan'], // Command utama\n  hidden: [], // Command simpel (jika ada)\n  use: 'Mengubah warna kulit dalam gambar menjadi hitam', // Deskripsi\n  category: 'ai',\n  async: async (m, { func, kuromi, isPrem }) => {\n    const { quoted } = m;\n    const q = quoted ? quoted : m;\n    const mime = (q.msg || q).mimetype || \\\"\\\";\n\n    if (!mime) return kuromi.reply(m.chat, `Kirim/reply gambar dengan caption *${func.prefix}hitamkan*`, m);\n    if (!/image\\/(jpe?g|png)/.test(mime)) return kuromi.reply(m.chat, `Format ${mime} tidak didukung! Hanya jpeg/jpg/png`, m);\n\n    let promptText = \\\"Ubahlah Karakter Dari Gambar Tersebut Diubah Kulitnya Menjadi Hitam\\\";\n\n    kuromi.reply(m.chat, \\\"Otw Menghitam...\\\", m);\n\n    try {\n      let imgData = await q.download();\n      let genAI = new GoogleGenerativeAI(\\\"AIzaSyDdfNNmvphdPdHSbIvpO5UkHdzBwx7NVm0\\\");\n\n      const base64Image = imgData.toString(\\\"base64\\\");\n\n      const contents = [\n        { text: promptText },\n        {\n          inlineData: {\n            mimeType: mime,\n            data: base64Image\n          }\n        }\n      ];\n\n      const model = genAI.getGenerativeModel({\n        model: \\\"gemini-2.0-flash-exp-image-generation\\\",\n        generationConfig: {\n          responseModalities: [\\\"Text\\\", \\\"Image\\\"]\n        },\n      });\n\n      const response = await model.generateContent(contents);\n\n      let resultImage;\n      let resultText = \\\"\\\";\n\n      for (const part of response.response.candidates[0].content.parts) {\n        if (part.text) {\n          resultText += part.text;\n        } else if (part.inlineData) {\n          const imageData = part.inlineData.data;\n          resultImage = Buffer.from(imageData, \\\"base64\\\");\n        }\n      }\n\n      if (resultImage) {\n        const tempPath = path.join(process.cwd(), \\\"tmp\\\", `gemini_${Date.now()}.png`);\n        fs.writeFileSync(tempPath, resultImage);\n\n        await kuromi.sendMessage(m.chat, {\n          image: { url: tempPath },\n          caption: `*Wahaha Makan Nih Hitam*`\n        }, { quoted: m });\n\n        setTimeout(() => {\n          try {\n            fs.unlinkSync(tempPath);\n          } catch {}\n        }, 30000);\n      } else {\n        kuromi.reply(m.chat, \\\"Gagal Menghitamkan.\\\", m);\n      }\n    } catch (error) {\n      console.error(error);\n      kuromi.reply(m.chat, `Error: ${error.message}`, m);\n    }\n  }\n};"
    },
    {
      "path": "plugins/owner/setmenu.js",
      "code": "//CREATE BY REZA DEVS KUROMI\nexports.run={usage:[\\\"setmenu\\\"],use:\\\"options\\\",category:\\\"owner\\\",async:async(e,{func:s,kuromi:t,setting:a})=>{try{return e.args&&e.args[0]?[\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\",\\\"5\\\"].includes(e.args[0])?void t.reply(e.chat,`Bot menu successfully set using style *${e.args[0]}*.`,e,{expiration:e.expiration}).then(()=>a.style=parseInt(e.args[0])):e.reply(\\\"Style not available.\\\"):e.reply(s.example(e.cmd,\\\"2\\\"))}catch(s){t.reply(e.chat,s.message,e,{expiration:e.expiration})}},owner:!0,location:\\\"plugins/owner/setmenu.js\\\"};"
    },
    {
      "path": "plugins/group/moderation.js",
      "code": "//CREATE BY REZA DEVS KUROMI\nexports.run={usage:[\\\"welcome\\\",\\\"left\\\",\\\"antigsmm\\\",\\\"detect\\\",\\\"antiporn\\\",\\\"antitoxic\\\",\\\"antilink\\\",\\\"antivirtex\\\",\\\"antibot\\\",\\\"antiluar\\\",\\\"antiviewonce\\\",\\\"antihidetag\\\",\\\"antidelete\\\",\\\"antiedited\\\",\\\"automatically\\\"],use:\\\"on / off\\\",category:\\\"admin tools\\\",async:async(a,{func:t,kuromi:n})=>{var e,i,o=global.db.groups[a.chat];return!a.isBotAdmin&&/antiporn|antitoxic|antilink|antivirtex|antibot|antiluar|antihidetag|automatically|antigsmm/.test(a.command)?a.reply(global.mess.botAdmin):a.args&&a.args[0]?(e=a.args[0].toLowerCase(),[\\\"on\\\",\\\"off\\\"].includes(e)?o[a.command]==(i=\\\"on\\\"===e)?a.reply(t.ucword(a.command)+` has been ${\\\"on\\\"==e?\\\"activated\\\":\\\"inactivated\\\"} previously.`):(o[a.command]=i,void n.reply(a.chat,t.ucword(a.command)+` has been ${\\\"on\\\"==e?\\\"activated\\\":\\\"inactivated\\\"} successfully.`,a)):a.reply(\\\"\\\"+t.example(a.cmd,\\\"on / off\\\"))):a.reply(`*Current status* : ${o[a.command]?\\\"active\\\":\\\"non-active\\\"}\n\n`+t.example(a.cmd,\\\"on / off\\\"))},admin:!0,group:!0,location:\\\"plugins/group/moderation.js\\\"};"
    },
    {
      "path": "plugins/developer/saveplugin",
      "code": "//CREATE BY REZA DEVS KUROMI\nlet fs=require(\\\"fs\\\"),path=require(\\\"path\\\");function getPathLocation(e){return!!(e=e.match(/location:\\s*['\\\"]([^'\\\"]+)['\\\"]/))&&e[1]}exports.run={usage:[\\\"saveplugin\\\"],hidden:[\\\"sp\\\"],use:\\\"path + reply code\\\",category:\\\"owner\\\",async:async(e,{kuromi:t,quoted:a})=>{if(!e.quoted)return e.reply(\\\"Mau simpan plugin dengan command apa? reply teks script nya!\\\");try{var n,o=/application\\/javascript/.test(a.mime)?(n=await a.download(),Buffer.from(n,\\\"base64\\\").toString(\\\"utf-8\\\")):e.quoted.text,r=e.text?e.text.trim():getPathLocation(o);if(!r)return e.reply(\\\"path location not found, please enter the plugins path.\\\");var s=path.join(process.cwd(),\\\"plugins\\\",r.replace(/plugins\\/|\\.js/g,\\\"\\\")+\\\".js\\\");fs.writeFileSync(s,o),await t.sendReact(e.chat,\\\"✅\\\",e.key)}catch(a){console.log(a),t.sendReact(e.chat,\\\"❌\\\",e.key)}},location:\\\"plugins/developer/saveplugin.js\\\",devs:!0};"
    },
    {
      "path": "plugins/developer/cheat.js",
      "code": "let database = {};\n\nconst items = [\n  'balance', 'limit',\n  'money', 'potion', 'trash', 'wood',\n  'rock', 'string', 'petFood', 'emerald',\n  'diamond', 'gold', 'iron', 'common',\n  'uncommon', 'mythic', 'legendary', 'pet',\n];\n\nexports.run = {\n  usage: ['cheat'],\n  hidden: ['ngecit'],\n  use: '[type] [value] [@tag]',\n  category: 'rpg',\n  async: async (m, { func, kuromi }) => {\n    if (database[m.sender]) return m.reply('Kamu sedang melakukan transfer!');\n    let user = global.db.users[m.sender];\n    const item = items.filter(v => v in user && typeof user[v] == 'number');\n    let example = `Use format ${m.cmd} [type] [value] [number]\nExample : ${m.cmd} money 9999 @0\n\n*Transferable Items*\n${item.map(v => func.ucword(v)).join('\\n')}\n`.trim();\n\n    const type = (m.args[0] || '').toLowerCase();\n    if (!item.includes(type)) return m.reply(example);\n\n    const count = m.args[1] && m.args[1].length > 0 ? Math.min(9999999999999999, Math.max(parseInt(m.args[1]), 1)) : Math.min(1);\n    let who = m.args[2] ? (m.args[2].replace(/[^0-9]/g, '') + '@s.whatsapp.net') : m.quoted ? m.quoted.sender : m.mentionedJid && m.mentionedJid[0] ? m.mentionedJid[0] : '';\n    if (!who) return m.reply('Tag salah satu, atau ketik nomornya!');\n    if (!(who in global.db.users)) return m.reply('Pengguna tidak ada didalam database.');\n    if (!global.db.users[who].register) return m.reply('Pengguna tersebut belum terverifikasi.');\n\n    let txt = `Are you sure you want to transfer *${count}* ${type}${special(type)} to @${(who || '').replace(/@s\\.whatsapp\\.net/g, '')}\nTimeout *60* detik.`.trim();\n    kuromi.reply(m.chat, txt + `\\n\\nketik *(Y/N)*`, m, { mentions: [who] });\n    database[m.sender] = {\n      sender: m.sender,\n      to: who,\n      key: m.key,\n      type: type,\n      count: count,\n      timeout: setTimeout(() => (m.reply('Timeout.'), delete database[m.sender]), 60 * 1000)\n    };\n  },\n  main: async (m, { func, kuromi }) => {\n    if (m.isBot) return;\n    if (!(m.sender in database)) return;\n    if (!m.budy) return;\n\n    let { timeout, sender, key, to, type, count } = database[m.sender];\n    if (m.id === key.id) return;\n    let user = global.db.users[sender];\n    let who = global.db.users[to];\n\n    if (func.somematch(['n', 'no'], m.budy.toLowerCase())) {\n      clearTimeout(timeout);\n      delete database[sender];\n      return m.reply('Transfer successfully cancelled.');\n    }\n\n    if (func.somematch(['y', 'yes'], m.budy.toLowerCase())) {\n      let before = who[type] * 1;\n      who[type] += count * 1;\n\n      if (who[type] > before) {\n        await kuromi.reply(m.chat, `Succes transfer *${count}* ${type}${special(type)} to *@${(to || '').replace(/@s\\.whatsapp\\.net/g, '')}*`, m);\n      } else {\n        m.reply(`Failed to transfer *${count}* ${type}${special(type)} to *@${(to || '').replace(/@s\\.whatsapp\\.net/g, '')}*`, null, { mentions: [to] });\n      }\n\n      clearTimeout(timeout);\n      delete database[sender];\n    }\n  },\n  register: true,\n  group: true\n};\n\nexports.database = database;\n\nfunction special(type) {\n  let b = type.toLowerCase();\n  let special = (['common', 'uncommon', 'mythic', 'legendary', 'pet'].includes(b) ? ' Crate' : '');\n  return special;\n}\n\nfunction isNumber(x) {\n  return typeof x === 'number' && !isNaN(x);\n}"
    },
    {
      "path": "plugins/searching/pinterest.js",
      "code": "const axios = require('axios');\n\nexports.run = {\n    usage: ['pinterest'],\n    hidden: ['pin'],\n    use: 'text',\n    category: 'searching',\n    async: async (m, { func, kuromi }) => {\n        if (!m.text) return m.reply(func.example(m.cmd, 'nakano miku'));\n        if (m.text.startsWith('@62')) return m.reply('Stress ??');\n  kuromi.sendReact(m.chat, '🕒', m.key);\n    let status = true;\n    \n        try {\n            let { data } = await axios.get(`https://api-kuromi-jet.vercel.app/pinterest/search?apikey=API-4bipdh8h5f&query=${encodeURIComponent(m.text)}`);\n            \n            if (!data || !data.result || !data.result.pins || data.result.pins.length === 0) \n                return m.reply('Tidak ditemukan.');\n\n            shuffleArray(data.result.pins); // Acak hasil pencarian\n            let pin = data.result.pins[0]; // Ambil hasil pertama setelah diacak\n\n            let imageUrl = pin.media.images.large?.url || pin.media.images.orig?.url;\n            if (!imageUrl) return m.reply('Gambar tidak ditemukan.');\n\n            let caption = `🔎 *Hasil pencarian:* ${m.text}\\n\\n📌 *Judul:* ${pin.title}\\n📜 *Deskripsi:* ${pin.description || 'Tidak ada deskripsi'}\\n🔗 *Link:* ${pin.pin_url}\\n👤 *Uploader:* ${pin.uploader.full_name} (@${pin.uploader.username})\\n🔗 *Profil:* ${pin.uploader.profile_url}`;\n\n              let button = [\n          ['next', `${m.cmd} ${m.text}`]\n        ];\n        \n        await kuromi.sendbut(m.chat, caption, footer, button, m, {\n          media: imageUrl,\n          expiration: m.expiration\n        });\nstatus = false; // Mengubah status menjadi false jika berhasil\n        } catch (error) {\n            m.reply(`Terjadi kesalahan: ${error.message}`);\n        }\n    }\n};\n\n// Fungsi untuk mengacak array\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}"
    },
    {
      "path": "plugins/ai/metaai.js",
      "code": "const axios = require('axios');\n\nexports.run = {\n  usage: ['metaai'],\n  hidden: ['ma'],\n  use: 'tanya ke Meta Llama 3',\n  category: 'ai',\n  async: async (m, { text, quoted }) => {\n    const query = text || (quoted && quoted.text);\n    if (!query) return m.reply('Apa yang ingin kamu tanyakan?');\nm.reply('wait')\n    try {\n      const res = await axios.get(`https://api.siputzx.my.id/api/ai/meta-llama-33-70B-instruct-turbo?content=${encodeURIComponent(query)}`);\n      m.reply(res.data.data);\n    } catch (e) {\n      m.reply('Maaf, terjadi kesalahan saat menghubungi AI.');\n    }\n  }\n}"
    }
  ]
}
